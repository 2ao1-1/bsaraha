name: CI/CD Pipeline with Docker

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_HUB_USERNAME }}/saraha
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64 # Multi-platform support
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' # Only deploy from main branch

    steps:
      - name: Deploy to Server via SSH
        uses: appleboy/ssh-action@v0.1.7 # Use specific version
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }} # Use SSH key instead of password
          port: ${{ secrets.SERVER_PORT || 22 }}
          timeout: 60s
          script: |
            # Set error handling
            set -e

            echo "üöÄ Starting deployment..."

            # Pull the latest image
            echo "üì¶ Pulling latest Docker image..."
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/saraha:latest

            # Stop and remove existing container gracefully
            echo "üõë Stopping existing container..."
            if docker ps -q --filter "name=bsaraha-app" | grep -q .; then
              docker stop bsaraha-app
              echo "‚úÖ Container stopped"
            else
              echo "‚ÑπÔ∏è No running container found"
            fi

            if docker ps -aq --filter "name=bsaraha-app" | grep -q .; then
              docker rm bsaraha-app
              echo "‚úÖ Container removed"
            else
              echo "‚ÑπÔ∏è No container to remove"
            fi

            # Clean up unused images to save space
            echo "üßπ Cleaning up unused Docker images..."
            docker image prune -f || true

            # Run new container
            echo "üöÄ Starting new container..."
            docker run -d \
              --name bsaraha-app \
              --restart unless-stopped \
              -p 3000:80 \
              -e NODE_ENV=production \
              ${{ secrets.DOCKER_HUB_USERNAME }}/saraha:latest

            # Verify deployment
            echo "üîç Verifying deployment..."
            sleep 10
            if docker ps --filter "name=bsaraha-app" --filter "status=running" | grep -q bsaraha-app; then
              echo "‚úÖ Deployment successful! Container is running."
            else
              echo "‚ùå Deployment failed! Container is not running."
              docker logs bsaraha-app
              exit 1
            fi

            echo "üéâ Deployment completed successfully!"
